# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/pascal-sochacki/backstagetalk
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "main"

backstageLabel: backstage

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 7007

ingress:
  className: nginx
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: backstage.k8s.sochacki.dev
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: backstage-tls
      hosts:
        - backstage.k8s.sochacki.dev

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

config:
  auth:
    environment: development
    providers:
      github:
        development:
          clientId: 15f435e851c3a57d93a3
          clientSecret: ${GITHUB_CLIENT_SECRET}

  kubernetes:
    serviceLocatorMethod:
      type: 'multiTenant'
    clusterLocatorMethods:
      - type: 'config'
        clusters:

        - url: https://kubernetes.default
          name: EKS
          authProvider: 'serviceAccount'
          skipTLSVerify: false
          skipMetricsLookup: true
          dashboardUrl: https://kubernetes.default
          dashboardApp: standard
  app:
    # Should be the same as backend.baseUrl when using the `app-backend` plugin.
    baseUrl: ${HOST}

  backend:
    # Note that the baseUrl should be the URL that the browser and other clients
    # should use when communicating with the backend, i.e. it needs to be
    # reachable not just from within the backend host, but from all of your
    # callers. When its value is "http://localhost:7007", it's strictly private
    # and can't be reached by others.
    baseUrl: ${HOST}
    # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
    # all interfaces, the most permissive setting. The right value depends on your specific deployment.
    listen: ':7007'

    # config options: https://node-postgres.com/api/client
    # database:
    #  client: pg
    #  connection:
    #    host: ${POSTGRES_HOST}
    #    port: ${POSTGRES_PORT}
    #    user: ${POSTGRES_USER}
    #    password: ${POSTGRES_PASSWORD}
        # https://node-postgres.com/features/ssl
        # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
        # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
        # ssl:
        #   ca: # if you have a CA file and want to verify it you can uncomment this section
        #     $file: <file-path>/ca/server.crt

  catalog:
    # Overrides the default list locations from app-config.yaml as these contain example data.
    # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
    # on how to get entities into the catalog.
    locations:
     - type: url
       target: https://github.com/pascal-sochacki/BackstageTalk/blob/main/backstage/examples/org.yaml
       rules:
         - allow: [User, Group]
     - type: url
       target: https://github.com/pascal-sochacki/BackstageTalk/blob/main/backstage/examples/entities.yaml
       rules:
         - allow: [ System, Component, API ]

postgresql:
  global:
    postgresql:
      auth:
        postgresPassword: DoNotUseInProduction
